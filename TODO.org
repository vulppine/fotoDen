* The big todo list

- [ ] GUI mode (Qt?)
  - Svelte NodeGUI? (it's Qt based, but it would be a wrapper around fotoDen's tool)
- [X] Separate website configurations for multi-site configs
- [ ] Multi-Viewer mode (allow more than one root viewer on the same page, and for viewers to communicate to each other - multiple viewers are technically allowed, but all links currently redirect to a URL)
- [X] Move some fotoDen functions to Go 1.16's new libraries
  - A minified fotoDen is now included in every build of fotoDen. If the correct build flags aren't set, however, fotoDen.js will instead copy from the configuration directory.
- [ ] Document fotoDen.js using JSDoc
- [ ] Split fotoDen.js into several files and change the makefile to combine all the separate JS files (maybe?)
  - This may require some fotoDen variables to be more *explicitly* global, as some variables need to be accessed by dynamically loaded modules (e.g., themes)
- [ ] Implement some kind of extension system using ES6 import/export (it's nice to have exif data and justified layout in the default theme, but maybe these should be extended to standard functionality without filling the main fotoDen library up with what is essentially a copy and paste of the code)
- [X] Properly implement image updating
  - [X] Possibly merge the functionality of adding images with updating images, doing a preliminary search through the current available items before deciding whether to add the image, or update the image based on name
- [X] Selectable themes
- [X] Ability to build folders and albums from YAML files (JSON will still be kept for front-end purposes)
- [ ] More functions for website templates for static generation (e.g., the ability to create a series of links for web navigation based on another template)
- [X] Persistant status bar during lengthy generation (e.g., album generation/folder generation) so that the user knows the current progress of generation
  - Not up to spec, but it is implemented - improve before 0.3.0 (by modifying cmdio-go)
- [ ] Add in static page generation using Markdown (possibly use goldmark?)
- [X] Add in optional web upload functionality, toggle by flags during build (e.g. NeoCities support, Google Cloud Platform support, so on, so on)
  - In progress:
    - [X] NeoCities
    - [ ] GCP
    - [ ] Azure
    - [ ] AWS
    - [ ] sftp? (at that point just use the command line tool)
- [ ] Make the file/batch API less... offputting to use (e.g., make it more closer to cp than what it is now)
  - [X] CopyFile
  - [ ] GetArrayOfFilesAndFolders
    - This might involve having to call filepath.Base on every single entry in a returned array for front end use.
